{
    "docs": [
        {
            "location": "/", 
            "text": "Caitlyn's Codecakes\n\n\nTeaching Python to your own middle school kids. Designed\nfor a 12 year old girl. These lessons are used with \n\nthese videos\n.\nThe videos are based on drills.\nThese lessons provide more explanation on theory, as\nrequested by my daughter.\n\n\nYou should go through the videos prior to attempting these lessons.\n\n\nLearning Objectives\n\n\nLesson 1 - Image\n\n\nChallenge\n\n\n\n\nPlace 5 images on screen\n\n\n\n\nLearning Objectives\n\n\n\n\ninfinite while loop\n\n\nx, y coordinate system\n\n\nvariable assignment\n\n\n\n\nLesson 2 - Move\n\n\nChallenge\n\n\n\n\nPlace 1 image on screen and make it move automatically\n\n\nyou do not need to build a controller\n\n\nas soon as the game starts, the character moves\n\n\nyou do not need to implement bounds detection\n\n\n\n\n\n\n\n\nLearning Objectives\n\n\n\n\nincrement (in while loop)\n\n\nbounds detection and handling\n\n\n\n\nLesson 3 - Control\n\n\nChallenge\n\n\n\n\nPlace 1 character on screen and make it move in all four directions\n\n\nSet up bounds detection\n\n\nbuild virtual controller using four images of arrows (right, left, up, down)\n\n\nwhen a player clicks on each arrow, make the character (guffy) move in the proper direction\n\n\n\n\nLearning Objectives\n\n\n\n\nevent loop (for loop)\n\n\nif statements\n\n\n\n\nLesson 4 - Chase\n\n\nLesson 5 - Text\n\n\nLesson 6 - Timer\n\n\nLesson 7 - Level", 
            "title": "Home"
        }, 
        {
            "location": "/#caitlyns-codecakes", 
            "text": "Teaching Python to your own middle school kids. Designed\nfor a 12 year old girl. These lessons are used with  these videos .\nThe videos are based on drills.\nThese lessons provide more explanation on theory, as\nrequested by my daughter.  You should go through the videos prior to attempting these lessons.", 
            "title": "Caitlyn's Codecakes"
        }, 
        {
            "location": "/#learning-objectives", 
            "text": "", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/#lesson-1-image", 
            "text": "", 
            "title": "Lesson 1 - Image"
        }, 
        {
            "location": "/#challenge", 
            "text": "Place 5 images on screen", 
            "title": "Challenge"
        }, 
        {
            "location": "/#learning-objectives_1", 
            "text": "infinite while loop  x, y coordinate system  variable assignment", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/#lesson-2-move", 
            "text": "", 
            "title": "Lesson 2 - Move"
        }, 
        {
            "location": "/#challenge_1", 
            "text": "Place 1 image on screen and make it move automatically  you do not need to build a controller  as soon as the game starts, the character moves  you do not need to implement bounds detection", 
            "title": "Challenge"
        }, 
        {
            "location": "/#learning-objectives_2", 
            "text": "increment (in while loop)  bounds detection and handling", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/#lesson-3-control", 
            "text": "", 
            "title": "Lesson 3 - Control"
        }, 
        {
            "location": "/#challenge_2", 
            "text": "Place 1 character on screen and make it move in all four directions  Set up bounds detection  build virtual controller using four images of arrows (right, left, up, down)  when a player clicks on each arrow, make the character (guffy) move in the proper direction", 
            "title": "Challenge"
        }, 
        {
            "location": "/#learning-objectives_3", 
            "text": "event loop (for loop)  if statements", 
            "title": "Learning Objectives"
        }, 
        {
            "location": "/#lesson-4-chase", 
            "text": "", 
            "title": "Lesson 4 - Chase"
        }, 
        {
            "location": "/#lesson-5-text", 
            "text": "", 
            "title": "Lesson 5 - Text"
        }, 
        {
            "location": "/#lesson-6-timer", 
            "text": "", 
            "title": "Lesson 6 - Timer"
        }, 
        {
            "location": "/#lesson-7-level", 
            "text": "", 
            "title": "Lesson 7 - Level"
        }, 
        {
            "location": "/lesson1/", 
            "text": "Lesson 1: Image\n\n\n\n\nIMPORTANT:\n Before going through PyChildren2, go through the videos in the \n\noriginal PyChildren\n\n\n\n\nCreate this\n\n\n\n\nUsing this code.\n\n\nimport pygame\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n    pygame.display.update()\n\n\n\nLoad Image\n\n\ndonut = pygame.image.load('img/donut.png')\n\n\n\nNotes: \n\n\n\n\nLoad image above main while loop.\n\n\n\n\nBlit Image (Displays Image)\n\n\nDISPLAY.blit(donut, (131, 465))\n\n\n\nNotes: \n\n\n\n\nMust be in main while loop.\n\n\n\n\nBackground Fill\n\n\nDISPLAY.fill(mint)\n\n\n\nNotes: \n\n\n\n\nmust be above the images that are blitted to screen\n\n\nmint is a variable that is defined as rgb\n\n\n\n\nExample:\n\n\nmint = (180,255,229)", 
            "title": "1. Image"
        }, 
        {
            "location": "/lesson1/#lesson-1-image", 
            "text": "IMPORTANT:  Before going through PyChildren2, go through the videos in the  original PyChildren   Create this   Using this code.  import pygame\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n    pygame.display.update()", 
            "title": "Lesson 1: Image"
        }, 
        {
            "location": "/lesson1/#load-image", 
            "text": "donut = pygame.image.load('img/donut.png')  Notes:    Load image above main while loop.", 
            "title": "Load Image"
        }, 
        {
            "location": "/lesson1/#blit-image-displays-image", 
            "text": "DISPLAY.blit(donut, (131, 465))  Notes:    Must be in main while loop.", 
            "title": "Blit Image (Displays Image)"
        }, 
        {
            "location": "/lesson1/#background-fill", 
            "text": "DISPLAY.fill(mint)  Notes:    must be above the images that are blitted to screen  mint is a variable that is defined as rgb   Example:  mint = (180,255,229)", 
            "title": "Background Fill"
        }, 
        {
            "location": "/lesson02/", 
            "text": "Goal\n\n\nMake the cupcake move, first down, then right.\n\n\n\n\nStarting Code\n\n\nimport pygame\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\n\ncupcake = pygame.image.load(\"img/cupcake.png\")\nx = 0\ny = 0\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n    DISPLAY.blit(cupcake, (x, y))\n    pygame.display.update()\n\n\n\nTips\n\n\nPut the x or y variable in the main while loop and\nincrement it with x = x + 1.  \n\n\nExtra Credit Quiz\n\n\nDo you know the shorthard for\nx = x + 1?", 
            "title": "2. Move"
        }, 
        {
            "location": "/lesson02/#goal", 
            "text": "Make the cupcake move, first down, then right.", 
            "title": "Goal"
        }, 
        {
            "location": "/lesson02/#starting-code", 
            "text": "import pygame\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\n\ncupcake = pygame.image.load(\"img/cupcake.png\")\nx = 0\ny = 0\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n    DISPLAY.blit(cupcake, (x, y))\n    pygame.display.update()", 
            "title": "Starting Code"
        }, 
        {
            "location": "/lesson02/#tips", 
            "text": "Put the x or y variable in the main while loop and\nincrement it with x = x + 1.", 
            "title": "Tips"
        }, 
        {
            "location": "/lesson02/#extra-credit-quiz", 
            "text": "Do you know the shorthard for\nx = x + 1?", 
            "title": "Extra Credit Quiz"
        }, 
        {
            "location": "/lesson03/", 
            "text": "Control\n\n\n\n\nSwitch the cupcake to Guffy the giraffe\n\n\nSet up bounds detection\n\n\nCreate virtual controller\n\n\nChange Guffy direction based on virtual controller\n\n\n\n\n\n\nSwitch to Guffy\n\n\nInsert this above the main while loop.\n\n\ngiraffe = pygame.image.load('img/giraffe.png')\ngiraffe_rect = pygame.Rect(0, 0, 64, 64)\n\n\n\nThe position of the giraffe needs to be specified by\na rectangle to enable collision detection with \ncollideRect in the future.\n\n\nMove Guffy\n\n\nWhat is the main while loop?\n\n\nThis is the main while loop.\n\n\ngameOn = True\n\nwhile gameOn:\n\n\n\nInitially Guffy direction\n\n\nInitially set Guffy's direction as down. Put this \nabove the main while loop.\n\n\ndirection = \"down\"\n\n\n\nGuffy moves based on changing the \ndirection\n variable\n\n\nThis must be in the main while loop.\n\n\nif direction == \"down\":\n    giraffe_rect.centery += speed\nelif direction == \"up\":\n    giraffe_rect.centery -= speed\nelif direction == \"right\":\n    giraffe_rect.centerx += speed\nelif direction == \"left\":\n    giraffe_rect.centerx -= speed\n\n\n\nBounds detection\n\n\nThis must be in the main while loop.\n\n\nif giraffe_rect.bottom \n 600:\n    direction = \"up\"\nif giraffe_rect.top \n 0:\n    direction = \"down\"\nif giraffe_rect.left \n 0:\n    direction = \"right\"\nif giraffe_rect.right \n 800:\n    direction = \"left\"\n\n\n\nVirtual Controller\n\n\nAbove the main while loop.\n\n\nuarrow = pygame.image.load('img/arrows/up.png')\nuarrow_rect = pygame.Rect(610, 300, 55, 100)\ndarrow = pygame.image.load('img/arrows/down.png')\ndarrow_rect = pygame.Rect(610, 475, 55, 100)\n\n\n\nInside the main while loop.\n\n\nDISPLAY.blit(larrow, larrow_rect)\nDISPLAY.blit(uarrow, uarrow_rect)\n\n\n\nChange Guffy Direction Based on Controller\n\n\nLook for the event for loop. Use an \nif\n statement\nto check for a \npygame.MOUSEBUTTONDOWN event\n.\n\n\nfor event in pygame.event.get():\n    if event.type == pygame.QUIT:\n        gameOn = False\n    if event.type == pygame.MOUSEBUTTONDOWN:\n        mouse_pos = pygame.mouse.get_pos()\n        if uarrow_rect.collidepoint(mouse_pos):\n            direction = \"up\"\n        if darrow_rect.collidepoint(mouse_pos):\n            direction = \"down\"\n\n\n\nAnswer\n\n\nThere is a complete code example in the answers section.\n\n\nPrior to looking at the answer, review \n\nthese videos\n for tips.", 
            "title": "3. Control"
        }, 
        {
            "location": "/lesson03/#control", 
            "text": "Switch the cupcake to Guffy the giraffe  Set up bounds detection  Create virtual controller  Change Guffy direction based on virtual controller", 
            "title": "Control"
        }, 
        {
            "location": "/lesson03/#switch-to-guffy", 
            "text": "Insert this above the main while loop.  giraffe = pygame.image.load('img/giraffe.png')\ngiraffe_rect = pygame.Rect(0, 0, 64, 64)  The position of the giraffe needs to be specified by\na rectangle to enable collision detection with \ncollideRect in the future.", 
            "title": "Switch to Guffy"
        }, 
        {
            "location": "/lesson03/#move-guffy", 
            "text": "", 
            "title": "Move Guffy"
        }, 
        {
            "location": "/lesson03/#what-is-the-main-while-loop", 
            "text": "This is the main while loop.  gameOn = True\n\nwhile gameOn:", 
            "title": "What is the main while loop?"
        }, 
        {
            "location": "/lesson03/#initially-guffy-direction", 
            "text": "Initially set Guffy's direction as down. Put this \nabove the main while loop.  direction = \"down\"", 
            "title": "Initially Guffy direction"
        }, 
        {
            "location": "/lesson03/#guffy-moves-based-on-changing-the-direction-variable", 
            "text": "This must be in the main while loop.  if direction == \"down\":\n    giraffe_rect.centery += speed\nelif direction == \"up\":\n    giraffe_rect.centery -= speed\nelif direction == \"right\":\n    giraffe_rect.centerx += speed\nelif direction == \"left\":\n    giraffe_rect.centerx -= speed", 
            "title": "Guffy moves based on changing the direction variable"
        }, 
        {
            "location": "/lesson03/#bounds-detection", 
            "text": "This must be in the main while loop.  if giraffe_rect.bottom   600:\n    direction = \"up\"\nif giraffe_rect.top   0:\n    direction = \"down\"\nif giraffe_rect.left   0:\n    direction = \"right\"\nif giraffe_rect.right   800:\n    direction = \"left\"", 
            "title": "Bounds detection"
        }, 
        {
            "location": "/lesson03/#virtual-controller", 
            "text": "Above the main while loop.  uarrow = pygame.image.load('img/arrows/up.png')\nuarrow_rect = pygame.Rect(610, 300, 55, 100)\ndarrow = pygame.image.load('img/arrows/down.png')\ndarrow_rect = pygame.Rect(610, 475, 55, 100)  Inside the main while loop.  DISPLAY.blit(larrow, larrow_rect)\nDISPLAY.blit(uarrow, uarrow_rect)", 
            "title": "Virtual Controller"
        }, 
        {
            "location": "/lesson03/#change-guffy-direction-based-on-controller", 
            "text": "Look for the event for loop. Use an  if  statement\nto check for a  pygame.MOUSEBUTTONDOWN event .  for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n        gameOn = False\n    if event.type == pygame.MOUSEBUTTONDOWN:\n        mouse_pos = pygame.mouse.get_pos()\n        if uarrow_rect.collidepoint(mouse_pos):\n            direction = \"up\"\n        if darrow_rect.collidepoint(mouse_pos):\n            direction = \"down\"", 
            "title": "Change Guffy Direction Based on Controller"
        }, 
        {
            "location": "/lesson03/#answer", 
            "text": "There is a complete code example in the answers section.  Prior to looking at the answer, review  these videos  for tips.", 
            "title": "Answer"
        }, 
        {
            "location": "/lesson04/", 
            "text": "Leo Chases Guffy\n\n\n\n\nAdd Leo the Lion\n\n\nChase algorithm\n\n\nAdd food \n\n\nChange Guffy speed based on food\n\n\n\n\n\n\nAdd Leo\n\n\nAbove while loop\n\n\nleo = pygame.image.load('img/leo-90.png')\n\n\n\nIn while loop\n\n\nDISPLAY.blit(leo, leor)\n\n\n\nLeo Chases Guffy\n\n\nThis is the x direction.\n\n\nif giraffe_rect.centerx \n leor.centerx:\n    leor.centerx -= 1\nelif giraffe_rect.centerx \n leor.centerx:\n    leor.centerx += 1\n\n\n\nSet up the y direction\n\n\nAdd food\n\n\nAbove while loop\n\n\nicecream = pygame.image.load('img/ice-cream.png')\nicecreamr = pygame.Rect(134, 300, 64, 64)\n\n\n\nIn while loop\n\n\nDISPLAY.blit(icecream, icecreamr)\n\n\n\nChange Guffy's Speed Based on Food Choices\n\n\nBased on Guffy's dietary choices, his speed will change.\nIf he eats a dessert, he will slow down.\n\n\nif giraffe_rect.colliderect(cupcaker):\n    speed = 1\n\n\n\nIf Guffy eats a fruit or vegetable, his speed increases.\n\n\nif giraffe_rect.colliderect(pear):\n    speed = 5\n\n\n\nAnswer\n\n\nFull code example in the \nanswers\n section.", 
            "title": "4. Chase"
        }, 
        {
            "location": "/lesson04/#leo-chases-guffy", 
            "text": "Add Leo the Lion  Chase algorithm  Add food   Change Guffy speed based on food", 
            "title": "Leo Chases Guffy"
        }, 
        {
            "location": "/lesson04/#add-leo", 
            "text": "Above while loop  leo = pygame.image.load('img/leo-90.png')  In while loop  DISPLAY.blit(leo, leor)", 
            "title": "Add Leo"
        }, 
        {
            "location": "/lesson04/#leo-chases-guffy_1", 
            "text": "This is the x direction.  if giraffe_rect.centerx   leor.centerx:\n    leor.centerx -= 1\nelif giraffe_rect.centerx   leor.centerx:\n    leor.centerx += 1  Set up the y direction", 
            "title": "Leo Chases Guffy"
        }, 
        {
            "location": "/lesson04/#add-food", 
            "text": "Above while loop  icecream = pygame.image.load('img/ice-cream.png')\nicecreamr = pygame.Rect(134, 300, 64, 64)  In while loop  DISPLAY.blit(icecream, icecreamr)", 
            "title": "Add food"
        }, 
        {
            "location": "/lesson04/#change-guffys-speed-based-on-food-choices", 
            "text": "Based on Guffy's dietary choices, his speed will change.\nIf he eats a dessert, he will slow down.  if giraffe_rect.colliderect(cupcaker):\n    speed = 1  If Guffy eats a fruit or vegetable, his speed increases.  if giraffe_rect.colliderect(pear):\n    speed = 5", 
            "title": "Change Guffy's Speed Based on Food Choices"
        }, 
        {
            "location": "/lesson04/#answer", 
            "text": "Full code example in the  answers  section.", 
            "title": "Answer"
        }, 
        {
            "location": "/text/", 
            "text": "Display Text on Screen\n\n\n\nTo use fonts, you need three steps:\n\n\n\n\nassign a variable to \npygame.font.Font\n(\nfont name\n, \nfont size\n)\n\n\nrender font and assign it to variable_surface\n\n\nblit rendered font to screen\n\n\n\n\nExample\n\n\ntimer_font = pygame.font.Font(\"font/animeace2_reg.ttf\", 16)\n\n\n\nIn while loop.\n\n\ntimer_surface = timer_font.render(\"Time: \", False, YELLOW)\nDISPLAY.blit(timer_surface, (0,0))\n\n\n\nText Example\n\n\nimport pygame\n\npygame.init()\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\nYELLOW = (255, 255, 128)\n\ntimer_font = pygame.font.Font(\"font/animeace2_reg.ttf\", 24)\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n\n    timer_surface = timer_font.render(\"Caitlyn\", True, YELLOW)\n    DISPLAY.blit(timer_surface, (0, 0))\n    pygame.display.update()", 
            "title": "5. Text"
        }, 
        {
            "location": "/text/#display-text-on-screen", 
            "text": "To use fonts, you need three steps:   assign a variable to  pygame.font.Font ( font name ,  font size )  render font and assign it to variable_surface  blit rendered font to screen   Example  timer_font = pygame.font.Font(\"font/animeace2_reg.ttf\", 16)  In while loop.  timer_surface = timer_font.render(\"Time: \", False, YELLOW)\nDISPLAY.blit(timer_surface, (0,0))", 
            "title": "Display Text on Screen"
        }, 
        {
            "location": "/text/#text-example", 
            "text": "import pygame\n\npygame.init()\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\nYELLOW = (255, 255, 128)\n\ntimer_font = pygame.font.Font(\"font/animeace2_reg.ttf\", 24)\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n\n    timer_surface = timer_font.render(\"Caitlyn\", True, YELLOW)\n    DISPLAY.blit(timer_surface, (0, 0))\n    pygame.display.update()", 
            "title": "Text Example"
        }, 
        {
            "location": "/timer/", 
            "text": "Time\n\n\n\n\ncalculate time elapsed since game started with \npygame.time.get_ticks()\n. This must be in the main while loop\n\n\nConvert elapsed time from milliseconds to seconds by diving by 1000.0\n\n\nMake number shorter by using \nround()\n\n\nConvert number to string with \nstr()\n\n\n\n\nCalculate Elaposed time\n\n\nYou can get the time elapsed since the game was started \nwith \npygame.time.get_ticks()\n\n\nThe example below does not bring up the the pygame window. It will only output text to the terminal. You must start your program from the terminal, not from the play button.\n\n\nimport pygame\npygame.init()\n\nwhile True:\n    print(pygame.time.get_ticks())\n\n\n\nRun the python program from the terminal.\n\n\n\n\nDo not press the play button.\n\n\n\n\nTo stop the program, press CTRL-c.\n\n\n\n\nNOTE: if CTRL-C doesn't work, you may need run Python from a command prompt or bash shell\n\n\n\n\n\n\nConvert from millisecond to seconds\n\n\npygame.time.get_ticks()\n will return \na long number with a lot of digits. To covert \nthe milliseconds to seconds, divide the\nnumber by 1000.0\n\n\ntimer_number = pygame.time.get_ticks() / 1000.0\n\n\n\nExample\n\n\nimport pygame\npygame.init()\n\nwhile True:\n    print(pygame.time.get_ticks()/1000.0)\n\n\n\nThis will display elapsed time with too many decimal places.\n\n\n\n\nShow only first decimal place\n\n\nFirst, assign timer to a variable.\n\n\nimport pygame\npygame.init()\n\nwhile True:\n    timer_number = pygame.time.get_ticks() / 1000.0\n    print(timer_number)\n\n\n\n\n\nYou now need to round it the time to only one decimal place. \nUse the new python command \nround\n(number, decimal places)\n.\n\n\nimport pygame\npygame.init()\n\nwhile True:\n    timer_number = pygame.time.get_ticks() / 1000.0\n    timer_one_decimal = round(timer_number, 1)\n    print(timer_one_decimal)\n\n\n\n\n\nConvert Number to String\n\n\nBefore you can blit the time to the screen, you will need \nto convert the number into a string.\n\n\ntimer_string = str(timer_one_decimal)\n\n\n\nThe complete code you need to get a string for the elapsed time with one \ndecimal place is shown below.\n\n\nimport pygame\npygame.init()\n\nwhile True:\n    timer_number = pygame.time.get_ticks() / 1000.0\n    timer_one_decimal = round(timer_number, 1)\n    timer_string = str(timer_one_decimal)\n    print(timer_string)\n\n\n\nDisplay Timer\n\n\nYou can now combine the previous lesson that showed\nyou how to display text on the screen with the \ntimer string code in this lesson.\n\n\ntimer_surface = timer_font.render(\"Time : \" + timer_string, True, YELLOW)\n\nDISPLAY.blit(timer_surface, (0,0))\n\n\n\nRemember to blank out the screen each cycle before you blit elements.", 
            "title": "6. Timer"
        }, 
        {
            "location": "/timer/#time", 
            "text": "calculate time elapsed since game started with  pygame.time.get_ticks() . This must be in the main while loop  Convert elapsed time from milliseconds to seconds by diving by 1000.0  Make number shorter by using  round()  Convert number to string with  str()", 
            "title": "Time"
        }, 
        {
            "location": "/timer/#calculate-elaposed-time", 
            "text": "You can get the time elapsed since the game was started \nwith  pygame.time.get_ticks()  The example below does not bring up the the pygame window. It will only output text to the terminal. You must start your program from the terminal, not from the play button.  import pygame\npygame.init()\n\nwhile True:\n    print(pygame.time.get_ticks())  Run the python program from the terminal.   Do not press the play button.   To stop the program, press CTRL-c.   NOTE: if CTRL-C doesn't work, you may need run Python from a command prompt or bash shell", 
            "title": "Calculate Elaposed time"
        }, 
        {
            "location": "/timer/#convert-from-millisecond-to-seconds", 
            "text": "pygame.time.get_ticks()  will return \na long number with a lot of digits. To covert \nthe milliseconds to seconds, divide the\nnumber by 1000.0  timer_number = pygame.time.get_ticks() / 1000.0  Example  import pygame\npygame.init()\n\nwhile True:\n    print(pygame.time.get_ticks()/1000.0)  This will display elapsed time with too many decimal places.", 
            "title": "Convert from millisecond to seconds"
        }, 
        {
            "location": "/timer/#show-only-first-decimal-place", 
            "text": "First, assign timer to a variable.  import pygame\npygame.init()\n\nwhile True:\n    timer_number = pygame.time.get_ticks() / 1000.0\n    print(timer_number)   You now need to round it the time to only one decimal place. \nUse the new python command  round (number, decimal places) .  import pygame\npygame.init()\n\nwhile True:\n    timer_number = pygame.time.get_ticks() / 1000.0\n    timer_one_decimal = round(timer_number, 1)\n    print(timer_one_decimal)", 
            "title": "Show only first decimal place"
        }, 
        {
            "location": "/timer/#convert-number-to-string", 
            "text": "Before you can blit the time to the screen, you will need \nto convert the number into a string.  timer_string = str(timer_one_decimal)  The complete code you need to get a string for the elapsed time with one \ndecimal place is shown below.  import pygame\npygame.init()\n\nwhile True:\n    timer_number = pygame.time.get_ticks() / 1000.0\n    timer_one_decimal = round(timer_number, 1)\n    timer_string = str(timer_one_decimal)\n    print(timer_string)", 
            "title": "Convert Number to String"
        }, 
        {
            "location": "/timer/#display-timer", 
            "text": "You can now combine the previous lesson that showed\nyou how to display text on the screen with the \ntimer string code in this lesson.  timer_surface = timer_font.render(\"Time : \" + timer_string, True, YELLOW)\n\nDISPLAY.blit(timer_surface, (0,0))  Remember to blank out the screen each cycle before you blit elements.", 
            "title": "Display Timer"
        }, 
        {
            "location": "/level/", 
            "text": "Levels\n\n\nCreate two screens for your game.\n\n\nCreate Start Screen\n\n\nFirst, create a new game that looks like this.\n\n\n\n\nPartial code above while loop\n\n\nPURPLE = (128, 0, 255)\nWHITE = (255, 255, 255)\n\ngameFont = pygame.font.Font('font/animeace2_ital.ttf', 48)\nstartButton = gameFont.render(\"Start\", True, PURPLE, WHITE)\nstartRect = startButton.get_rect()\nstartRect.center = DISPLAY.get_rect().center\n\n\n\nCreate Game Screen\n\n\nCopy your file from the start screen and save it with a new file name.\nModify the code so that your game looks like this.\n\n\n\n\nSet Up Level 0 for Start Screen\n\n\nAbove while loop.\n\n\nlevel = 0\n\n\n\nInside of while loop.\n\n\nif level == 0:\n    DISPLAY.fill(PURPLE)\n    DISPLAY.blit(startButton, startRect)\n\n\n\nGet Mouse Position for Button Press\n\n\nInside of event loop (\nfor event\n)\n\n\nif event.type == pygame.MOUSEBUTTONDOWN:\n    mousePos = pygame.mouse.get_pos()\n\n\n\nSwitch from level 0 to level 1\n\n\nInside of level 0 block (\nif level == 0:\n)\n\n\nif startRect.collidepoint(mousePos):\n    level = 1\n\n\n\nSet up level 1 game block\n\n\nUse \nif level == 1:\n.\n\n\nFull Code\n\n\nimport pygame\n\npygame.init()\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\n\nPURPLE = (128, 0, 255)\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0, 0)\n\ngameFont = pygame.font.Font('font/animeace2_ital.ttf', 48)\nstartButton = gameFont.render(\"Start\", True, PURPLE, WHITE)\nstartRect = startButton.get_rect()\nstartRect.center = DISPLAY.get_rect().center\n\nguffy = pygame.image.load(\"img/giraffe.png\")\nguffyRect = guffy.get_rect(center=(400, 300))\n\nmousePos = (0, 0)\n\nlevel = 0\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            mousePos = pygame.mouse.get_pos()\n    if level == 0:\n        DISPLAY.fill(PURPLE)\n        DISPLAY.blit(startButton, startRect)\n        if startRect.collidepoint(mousePos):\n            level = 1\n    elif level == 1:\n        DISPLAY.fill(BLACK)\n        DISPLAY.blit(guffy, guffyRect)\n    pygame.display.update()", 
            "title": "7. Level"
        }, 
        {
            "location": "/level/#levels", 
            "text": "Create two screens for your game.", 
            "title": "Levels"
        }, 
        {
            "location": "/level/#create-start-screen", 
            "text": "First, create a new game that looks like this.   Partial code above while loop  PURPLE = (128, 0, 255)\nWHITE = (255, 255, 255)\n\ngameFont = pygame.font.Font('font/animeace2_ital.ttf', 48)\nstartButton = gameFont.render(\"Start\", True, PURPLE, WHITE)\nstartRect = startButton.get_rect()\nstartRect.center = DISPLAY.get_rect().center", 
            "title": "Create Start Screen"
        }, 
        {
            "location": "/level/#create-game-screen", 
            "text": "Copy your file from the start screen and save it with a new file name.\nModify the code so that your game looks like this.", 
            "title": "Create Game Screen"
        }, 
        {
            "location": "/level/#set-up-level-0-for-start-screen", 
            "text": "Above while loop.  level = 0  Inside of while loop.  if level == 0:\n    DISPLAY.fill(PURPLE)\n    DISPLAY.blit(startButton, startRect)", 
            "title": "Set Up Level 0 for Start Screen"
        }, 
        {
            "location": "/level/#get-mouse-position-for-button-press", 
            "text": "Inside of event loop ( for event )  if event.type == pygame.MOUSEBUTTONDOWN:\n    mousePos = pygame.mouse.get_pos()", 
            "title": "Get Mouse Position for Button Press"
        }, 
        {
            "location": "/level/#switch-from-level-0-to-level-1", 
            "text": "Inside of level 0 block ( if level == 0: )  if startRect.collidepoint(mousePos):\n    level = 1", 
            "title": "Switch from level 0 to level 1"
        }, 
        {
            "location": "/level/#set-up-level-1-game-block", 
            "text": "Use  if level == 1: .", 
            "title": "Set up level 1 game block"
        }, 
        {
            "location": "/level/#full-code", 
            "text": "import pygame\n\npygame.init()\n\nSIZE = (800, 600)\n\nDISPLAY = pygame.display.set_mode(SIZE)\n\nPURPLE = (128, 0, 255)\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0, 0)\n\ngameFont = pygame.font.Font('font/animeace2_ital.ttf', 48)\nstartButton = gameFont.render(\"Start\", True, PURPLE, WHITE)\nstartRect = startButton.get_rect()\nstartRect.center = DISPLAY.get_rect().center\n\nguffy = pygame.image.load(\"img/giraffe.png\")\nguffyRect = guffy.get_rect(center=(400, 300))\n\nmousePos = (0, 0)\n\nlevel = 0\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            mousePos = pygame.mouse.get_pos()\n    if level == 0:\n        DISPLAY.fill(PURPLE)\n        DISPLAY.blit(startButton, startRect)\n        if startRect.collidepoint(mousePos):\n            level = 1\n    elif level == 1:\n        DISPLAY.fill(BLACK)\n        DISPLAY.blit(guffy, guffyRect)\n    pygame.display.update()", 
            "title": "Full Code"
        }, 
        {
            "location": "/answers/", 
            "text": "Lesson 02\n\n\nExtra Credit: x += 1 is the shorthand for x = x + 1\n\n\nLesson 3 Complete Code Example\n\n\nimport pygame\n\npygame.init()\n\nFPS = 30\nclock = pygame.time.Clock()\n\nSIZE = (800, 600)\nDISPLAY = pygame.display.set_mode(SIZE)\n\nspeed = 8\nrightarrow = pygame.image.load(\"img/arrows/right.png\")\ngiraffe = pygame.image.load('img/giraffe.png')\ngiraffe_rect = pygame.Rect(0, 0, 64, 64)\nrightarrow = pygame.image.load('img/arrows/right.png')\nrightarrow_rect = pygame.Rect(680, 400, 100, 55)\nlarrow = pygame.image.load('img/arrows/left.png')\nlarrow_rect = pygame.Rect(500, 400, 100, 55)\nuarrow = pygame.image.load('img/arrows/up.png')\nuarrow_rect = pygame.Rect(610, 300, 55, 100)\ndarrow = pygame.image.load('img/arrows/down.png')\ndarrow_rect = pygame.Rect(610, 475, 55, 100)\n\n\nlavender = (230, 230, 250)\n\n\ndirection = \"down\"\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            mouse_pos = pygame.mouse.get_pos()\n            if uarrow_rect.collidepoint(mouse_pos):\n                direction = \"up\"\n            if darrow_rect.collidepoint(mouse_pos):\n                direction = \"down\"\n            if rightarrow_rect.collidepoint(mouse_pos):\n                direction = \"right\"\n            if larrow_rect.collidepoint(mouse_pos):\n                direction = \"left\"\n\n    DISPLAY.fill(lavender)\n    DISPLAY.blit(giraffe, giraffe_rect)\n    DISPLAY.blit(rightarrow, rightarrow_rect)\n    DISPLAY.blit(larrow, larrow_rect)\n    DISPLAY.blit(uarrow, uarrow_rect)\n    DISPLAY.blit(darrow, darrow_rect)\n\n    if direction == \"down\":\n        giraffe_rect.centery += speed\n    elif direction == \"up\":\n        giraffe_rect.centery -= speed\n    elif direction == \"right\":\n        giraffe_rect.centerx += speed\n    elif direction == \"left\":\n        giraffe_rect.centerx -= speed\n    if giraffe_rect.bottom \n 600:\n        direction = \"up\"\n    if giraffe_rect.top \n 0:\n        direction = \"down\"\n    if giraffe_rect.left \n 0:\n        direction = \"right\"\n    if giraffe_rect.right \n 800:\n        direction = \"left\"\n\n\n    clock.tick(FPS)\n    pygame.display.update()\n\n\n\nLesson 04 Full Code\n\n\nimport pygame\n\npygame.init()\n\nFPS = 30\nclock = pygame.time.Clock()\n\nSIZE = (800, 600)\nDISPLAY = pygame.display.set_mode(SIZE)\n\nspeed = 5\nrightarrow = pygame.image.load(\"img/arrows/right.png\")\ngiraffe = pygame.image.load('img/giraffe.png')\ngiraffe_rect = pygame.Rect(0, 0, 64, 64)\nrightarrow = pygame.image.load('img/arrows/right.png')\nrightarrow_rect = pygame.Rect(680, 400, 100, 55)\nlarrow = pygame.image.load('img/arrows/left.png')\nlarrow_rect = pygame.Rect(500, 400, 100, 55)\nuarrow = pygame.image.load('img/arrows/up.png')\nuarrow_rect = pygame.Rect(610, 300, 55, 100)\ndarrow = pygame.image.load('img/arrows/down.png')\ndarrow_rect = pygame.Rect(610, 475, 55, 100)\ncupcake = pygame.image.load('img/cupcake.png')\ncupcaker = pygame.Rect(434, 234, 64, 64)\npea = pygame.image.load('img/pea.png')\npear = pygame.Rect(234, 503, 64, 64)\nleo = pygame.image.load('img/leo-90.png')\nleor = pygame.Rect(254, 394, 64, 64)\npineapple = pygame.image.load('img/pineapple.png')\npineappler = pygame.Rect(700, 70, 64, 64)\ndonut = pygame.image.load('img/donut.png')\ndonutr = pygame.Rect(200, 80, 64, 64)\nicecream = pygame.image.load('img/ice-cream.png')\nicecreamr = pygame.Rect(134, 300, 64, 64)\npopsicle = pygame.image.load('img/popsicle.png')\npopsicler = pygame.Rect(650, 200, 64, 64)\n\nlavender = (230, 230, 250)\nRED = (255, 0, 0)\ngreen = (0, 255, 0)\n\n\ndirection = \"down\"\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            mouse_pos = pygame.mouse.get_pos()\n            if uarrow_rect.collidepoint(mouse_pos):\n                direction = \"up\"\n            if darrow_rect.collidepoint(mouse_pos):\n                direction = \"down\"\n            if rightarrow_rect.collidepoint(mouse_pos):\n                direction = \"right\"\n            if larrow_rect.collidepoint(mouse_pos):\n                direction = \"left\"\n\n    DISPLAY.fill(lavender)\n    DISPLAY.blit(giraffe, giraffe_rect)\n    DISPLAY.blit(rightarrow, rightarrow_rect)\n    DISPLAY.blit(larrow, larrow_rect)\n    DISPLAY.blit(uarrow, uarrow_rect)\n    DISPLAY.blit(darrow, darrow_rect)\n    DISPLAY.blit(cupcake, cupcaker)\n    DISPLAY.blit(pea, pear)\n    DISPLAY.blit(leo, leor)\n    DISPLAY.blit(pineapple, pineappler)\n    DISPLAY.blit(donut, donutr)\n    DISPLAY.blit(icecream, icecreamr)\n    DISPLAY.blit(popsicle, popsicler)\n\n    if direction == \"down\":\n        giraffe_rect.centery += speed\n    elif direction == \"up\":\n        giraffe_rect.centery -= speed\n    elif direction == \"right\":\n        giraffe_rect.centerx += speed\n    elif direction == \"left\":\n        giraffe_rect.centerx -= speed\n    if giraffe_rect.bottom \n 600:\n        direction = \"up\"\n    if giraffe_rect.top \n 0:\n        direction = \"down\"\n    if giraffe_rect.left \n 0:\n        direction = \"right\"\n    if giraffe_rect.right \n 800:\n        direction = \"left\"\n    if giraffe_rect.colliderect(cupcaker):\n        speed = 1\n    if giraffe_rect.colliderect(pear):\n        speed = 5\n    if giraffe_rect.colliderect(pineappler):\n        speed = 5\n    if giraffe_rect.colliderect(donutr):\n        speed = 1\n    if giraffe_rect.colliderect(icecreamr):\n        speed = 1\n    if giraffe_rect.colliderect(popsicler):\n        speed = 1\n    if giraffe_rect.centerx \n leor.centerx:\n        leor.centerx -= 1\n    elif giraffe_rect.centerx \n leor.centerx:\n        leor.centerx += 1\n    if giraffe_rect.centery \n leor.centery:\n        leor.centery -= 1\n    elif giraffe_rect.centery \n leor.centery:\n        leor.centery += 1\n    if giraffe_rect.colliderect(leor):\n        DISPLAY.fill(RED)\n\n\n    clock.tick(FPS)\n    pygame.display.update()", 
            "title": "Answers"
        }, 
        {
            "location": "/answers/#lesson-02", 
            "text": "Extra Credit: x += 1 is the shorthand for x = x + 1", 
            "title": "Lesson 02"
        }, 
        {
            "location": "/answers/#lesson-3-complete-code-example", 
            "text": "import pygame\n\npygame.init()\n\nFPS = 30\nclock = pygame.time.Clock()\n\nSIZE = (800, 600)\nDISPLAY = pygame.display.set_mode(SIZE)\n\nspeed = 8\nrightarrow = pygame.image.load(\"img/arrows/right.png\")\ngiraffe = pygame.image.load('img/giraffe.png')\ngiraffe_rect = pygame.Rect(0, 0, 64, 64)\nrightarrow = pygame.image.load('img/arrows/right.png')\nrightarrow_rect = pygame.Rect(680, 400, 100, 55)\nlarrow = pygame.image.load('img/arrows/left.png')\nlarrow_rect = pygame.Rect(500, 400, 100, 55)\nuarrow = pygame.image.load('img/arrows/up.png')\nuarrow_rect = pygame.Rect(610, 300, 55, 100)\ndarrow = pygame.image.load('img/arrows/down.png')\ndarrow_rect = pygame.Rect(610, 475, 55, 100)\n\n\nlavender = (230, 230, 250)\n\n\ndirection = \"down\"\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            mouse_pos = pygame.mouse.get_pos()\n            if uarrow_rect.collidepoint(mouse_pos):\n                direction = \"up\"\n            if darrow_rect.collidepoint(mouse_pos):\n                direction = \"down\"\n            if rightarrow_rect.collidepoint(mouse_pos):\n                direction = \"right\"\n            if larrow_rect.collidepoint(mouse_pos):\n                direction = \"left\"\n\n    DISPLAY.fill(lavender)\n    DISPLAY.blit(giraffe, giraffe_rect)\n    DISPLAY.blit(rightarrow, rightarrow_rect)\n    DISPLAY.blit(larrow, larrow_rect)\n    DISPLAY.blit(uarrow, uarrow_rect)\n    DISPLAY.blit(darrow, darrow_rect)\n\n    if direction == \"down\":\n        giraffe_rect.centery += speed\n    elif direction == \"up\":\n        giraffe_rect.centery -= speed\n    elif direction == \"right\":\n        giraffe_rect.centerx += speed\n    elif direction == \"left\":\n        giraffe_rect.centerx -= speed\n    if giraffe_rect.bottom   600:\n        direction = \"up\"\n    if giraffe_rect.top   0:\n        direction = \"down\"\n    if giraffe_rect.left   0:\n        direction = \"right\"\n    if giraffe_rect.right   800:\n        direction = \"left\"\n\n\n    clock.tick(FPS)\n    pygame.display.update()", 
            "title": "Lesson 3 Complete Code Example"
        }, 
        {
            "location": "/answers/#lesson-04-full-code", 
            "text": "import pygame\n\npygame.init()\n\nFPS = 30\nclock = pygame.time.Clock()\n\nSIZE = (800, 600)\nDISPLAY = pygame.display.set_mode(SIZE)\n\nspeed = 5\nrightarrow = pygame.image.load(\"img/arrows/right.png\")\ngiraffe = pygame.image.load('img/giraffe.png')\ngiraffe_rect = pygame.Rect(0, 0, 64, 64)\nrightarrow = pygame.image.load('img/arrows/right.png')\nrightarrow_rect = pygame.Rect(680, 400, 100, 55)\nlarrow = pygame.image.load('img/arrows/left.png')\nlarrow_rect = pygame.Rect(500, 400, 100, 55)\nuarrow = pygame.image.load('img/arrows/up.png')\nuarrow_rect = pygame.Rect(610, 300, 55, 100)\ndarrow = pygame.image.load('img/arrows/down.png')\ndarrow_rect = pygame.Rect(610, 475, 55, 100)\ncupcake = pygame.image.load('img/cupcake.png')\ncupcaker = pygame.Rect(434, 234, 64, 64)\npea = pygame.image.load('img/pea.png')\npear = pygame.Rect(234, 503, 64, 64)\nleo = pygame.image.load('img/leo-90.png')\nleor = pygame.Rect(254, 394, 64, 64)\npineapple = pygame.image.load('img/pineapple.png')\npineappler = pygame.Rect(700, 70, 64, 64)\ndonut = pygame.image.load('img/donut.png')\ndonutr = pygame.Rect(200, 80, 64, 64)\nicecream = pygame.image.load('img/ice-cream.png')\nicecreamr = pygame.Rect(134, 300, 64, 64)\npopsicle = pygame.image.load('img/popsicle.png')\npopsicler = pygame.Rect(650, 200, 64, 64)\n\nlavender = (230, 230, 250)\nRED = (255, 0, 0)\ngreen = (0, 255, 0)\n\n\ndirection = \"down\"\n\ngameOn = True\n\nwhile gameOn:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            gameOn = False\n        if event.type == pygame.MOUSEBUTTONDOWN:\n            mouse_pos = pygame.mouse.get_pos()\n            if uarrow_rect.collidepoint(mouse_pos):\n                direction = \"up\"\n            if darrow_rect.collidepoint(mouse_pos):\n                direction = \"down\"\n            if rightarrow_rect.collidepoint(mouse_pos):\n                direction = \"right\"\n            if larrow_rect.collidepoint(mouse_pos):\n                direction = \"left\"\n\n    DISPLAY.fill(lavender)\n    DISPLAY.blit(giraffe, giraffe_rect)\n    DISPLAY.blit(rightarrow, rightarrow_rect)\n    DISPLAY.blit(larrow, larrow_rect)\n    DISPLAY.blit(uarrow, uarrow_rect)\n    DISPLAY.blit(darrow, darrow_rect)\n    DISPLAY.blit(cupcake, cupcaker)\n    DISPLAY.blit(pea, pear)\n    DISPLAY.blit(leo, leor)\n    DISPLAY.blit(pineapple, pineappler)\n    DISPLAY.blit(donut, donutr)\n    DISPLAY.blit(icecream, icecreamr)\n    DISPLAY.blit(popsicle, popsicler)\n\n    if direction == \"down\":\n        giraffe_rect.centery += speed\n    elif direction == \"up\":\n        giraffe_rect.centery -= speed\n    elif direction == \"right\":\n        giraffe_rect.centerx += speed\n    elif direction == \"left\":\n        giraffe_rect.centerx -= speed\n    if giraffe_rect.bottom   600:\n        direction = \"up\"\n    if giraffe_rect.top   0:\n        direction = \"down\"\n    if giraffe_rect.left   0:\n        direction = \"right\"\n    if giraffe_rect.right   800:\n        direction = \"left\"\n    if giraffe_rect.colliderect(cupcaker):\n        speed = 1\n    if giraffe_rect.colliderect(pear):\n        speed = 5\n    if giraffe_rect.colliderect(pineappler):\n        speed = 5\n    if giraffe_rect.colliderect(donutr):\n        speed = 1\n    if giraffe_rect.colliderect(icecreamr):\n        speed = 1\n    if giraffe_rect.colliderect(popsicler):\n        speed = 1\n    if giraffe_rect.centerx   leor.centerx:\n        leor.centerx -= 1\n    elif giraffe_rect.centerx   leor.centerx:\n        leor.centerx += 1\n    if giraffe_rect.centery   leor.centery:\n        leor.centery -= 1\n    elif giraffe_rect.centery   leor.centery:\n        leor.centery += 1\n    if giraffe_rect.colliderect(leor):\n        DISPLAY.fill(RED)\n\n\n    clock.tick(FPS)\n    pygame.display.update()", 
            "title": "Lesson 04 Full Code"
        }, 
        {
            "location": "/exercises/for/", 
            "text": "for\n loops\n\n\nDescribe what will happen in the code below:\n\n\nfor number in range(0, 9):\n    print(number)\n\n\n\nTry it.\n\n\n\n\nDescribe what happens.\n\n\nfor animal in ['dog', 'cat', 'duck']:\n    print(animal)\n\n\n\n\n\nDescribe what happens.\n\n\nanimals = ['mongoose', 'ox', 'coyote', 'mountain lion']\n\nfor animal in animals:\n    print(animal)\n\n\n\n\n\nTake the code above and modify it with an \nif\n statement to \nprint out only \ncoyote\n. The print statement must be\nin the for loop.\n\n\n\n\nModify the code below to print out only \nMOUSEBUTTONDOWN\n.\n\n\nevents = ['MOUSEBUTTONDOWN', 'KEYDOWN', 'KEYUP', 'QUIT']\n\nfor event in events:\n    print(event)", 
            "title": "for loops"
        }, 
        {
            "location": "/exercises/for/#for-loops", 
            "text": "Describe what will happen in the code below:  for number in range(0, 9):\n    print(number)  Try it.   Describe what happens.  for animal in ['dog', 'cat', 'duck']:\n    print(animal)   Describe what happens.  animals = ['mongoose', 'ox', 'coyote', 'mountain lion']\n\nfor animal in animals:\n    print(animal)   Take the code above and modify it with an  if  statement to \nprint out only  coyote . The print statement must be\nin the for loop.   Modify the code below to print out only  MOUSEBUTTONDOWN .  events = ['MOUSEBUTTONDOWN', 'KEYDOWN', 'KEYUP', 'QUIT']\n\nfor event in events:\n    print(event)", 
            "title": "for loops"
        }, 
        {
            "location": "/exercises/list/", 
            "text": "list\n\n\nA list can be a string, integer, number, image, or any\npiece of information.\n\n\nWhat happens below?\n\n\nanimals = ['dog', 'cat', 'bird']\n\nprint(animals[0])\n\n\n\n\n\nYou can add things to the end of a list with \n.append()\n.\n\n\nWhat happens below?\n\n\nanimals = ['dog', 'cat', 'bird']\n\nanimals.append('sheep')\n\nprint(animals)\n\n\n\n\n\nYou can iterate through a list.\n\n\nWhat happens?\n\n\nanimals = ['dog', 'cat', 'bird']\n\nanimals.append('sheep')\n\nfor animal in animals:\n    print(animal)", 
            "title": "lists"
        }, 
        {
            "location": "/exercises/list/#list", 
            "text": "A list can be a string, integer, number, image, or any\npiece of information.  What happens below?  animals = ['dog', 'cat', 'bird']\n\nprint(animals[0])   You can add things to the end of a list with  .append() .  What happens below?  animals = ['dog', 'cat', 'bird']\n\nanimals.append('sheep')\n\nprint(animals)   You can iterate through a list.  What happens?  animals = ['dog', 'cat', 'bird']\n\nanimals.append('sheep')\n\nfor animal in animals:\n    print(animal)", 
            "title": "list"
        }
    ]
}